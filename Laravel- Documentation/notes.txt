|-------------------------------------------------------------
|  Laravel 8 Personal Notes/Documentation 
|-------------------------------------------------------------

!!! Important Note: Laravel should always be served out of the root of the "web directory" configured for your web server.

|-------------------------------------------------------------
|  1. Configuration 
|-------------------------------------------------------------

|-------------------------------------------------------------
|  Configuration Caching
|-------------------------------------------------------------

To give your application a speed boost, you should cache all of your configuration files into a single file using the config:cache Artisan command.
    - php artisan config:cache must be run with your production deployment process and not during local production deployment process.

|-------------------------------------------------------------
|  Debug Mode
|-------------------------------------------------------------
For local development, you should set the APP_DEBUG environment variable to true. In your production environment, this value should always be false. If the variable is set to true in production, you risk exposing sensitive configuration values to your application's end users.

|-------------------------------------------------------------
|  Maintenance Mode
|-------------------------------------------------------------
When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This is perfect for when your application is down or updating. A status code 0f 503 is thrown.
    - php artisan down this will put the application into maintenance mode
    - php artisan up will set the application live
    - php artisan down --refresh=15 The Refresh header will instruct the browser to automatically refresh the page after the specified number of seconds

# Bypassing Maintenance Mode
Even while in maintenance mode, you may use the secret option to specify a maintenance mode bypass token:
    - php artisan down --secret="qwerty1234ABCDE"
    - https://example.com/qwerty1234ABCDE

# Pre-Rendering the maintenance mode view
    - php artisan down --render="errors::503" You can place any error code you want your application to display.

# Redirecting Maintenance mode requests
While in maintenance mode, Laravel will display the maintenance mode view for all application URLs the user attempts to access. If you wish, you may instruct Laravel to redirect all requests to a specific URL. 
    - php artisan down --redirect=/

# Disabling Maintenance Mode
To disable maintenance mode, use the up command 
    - php artisan up

You may customize the default maintenance mode template by defining your own template at:
    - resources/views/errors/503.blade.php
    - php artisan down --redirect/errors/503
Be sure to create the maintenance and store it in the correct folder in the views and call it  in web.php in the routes folder.
|-------------------------------------------------------------
|  2. Directory Structure
|-------------------------------------------------------------

# The Storage Directory
The storage/app/public directory may be used to store user-generated files, such as profile avatars, that should be publicly accessible. You should create a symbolic link at public/storage which points to this directory. 
    - You may create the link using the php artisan storage:link Artisan command.

# The Listeners Directory
The Listeners directory contains the classes that handle your events. Event listeners receieve an event instance and perform login in response to the event being fired. For example, a UserRegistered event might be handled by a SendWelcomeEmail listener. 

|-------------------------------------------------------------
|  3. Starter Kits
|-------------------------------------------------------------

# Installation of Laravel Breeze
- curl -s https://laravel.build/example-app | bash
- cd example-app
- php artisan migrate

Once you have created a new Laravel Application
- composer require laravel/breeze --development
- php artisan breeze:install
- npm install
- npm run dev 
- php artisan migrate 
Next we can navigate to your applications /login or /register URL's in the web browser. All of Breeze's routes are defined within the routes/auth.php file. 

|-------------------------------------------------------------
|  4. Deployment
|-------------------------------------------------------------

# Optimization

# Autoloader Optimization
- composer install --optimize-autoloader --no-dev

# Optimizing configuration loading
When deploying your application to production, you should make sure that you run the config:cache Artisan command during your deployment process:
- php artisan config:cache --> This command will combine all of Laravel's configuration files into a single, cached file, which greatly reduces the number of trips the framework must make to the filesystem when loading your configuration values.

# Optimizing Route Loading 
When building large applications with many routes, you should make sure to run route:cache Artsian command during deployment process:
- php artisan route:cache  ----> This command reduces all of your route registrations into a single method call within a cached file, improving the performance of route registration when registering hundreds of routes.

# Optimizing View Loading 
When deploying your application to production, you should make sure that you run the view:cache Artisan command during your deployment process:
- php artisan view:cache ---> This command precompiles all your Blade views so they are not compiled on demand, improving the performance of each request that returns a view.

# Debug Mode
The debug option in the config/app.php configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the APP_DEBUG environment variable, which is stored in your .env file. 
In your production environment, this value should always be false. If the APP_DEBUG variable is set to true in production, you risk exposing sensitive configuration values to your application's end users.

|-------------------------------------------------------------
|  5. Request Lifecycle
|------------------------------------------------------------

#Lifecycle Overview
The entry point for all requests to a laravel application is the public/index.php file. 

# HTTP / Console Kernels
The method signature for the HTTP kernel's handle method is quite simple: it receives a Request and returns a Response. Think of the kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses.
