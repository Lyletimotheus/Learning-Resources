-------------------
Laravel Study Notes 
-------------------
1. Advantages of Laravel
- Single Authentication
- Simple API drivers
- Makes your app faster
- Helps for security

2. Disadvantages
- Composer: good to use, but not as good as NPM
- Less in-built support: bad support compared to Django and Ruby
- Bad Updates: updates might be problematic

3. Projects To Build
- ToDo List
- Login System
- Blog
- Bookmarker Manager
- TimeSheet
- Order app
- Portfolio
- CMS 
- Social Network
- Ecommerce


4. Creating a Laravel Project 
    # Option 1
        - First create the directory you want to work in from the command line
        - laravel new THE NAME OF THE PROJECT

    # Option 2
        - Using Composer to create your first Project
        - composer create-project --prefer-dist laravel/laravel THE NAME OF THE PROJECT

5. Serve the project to the web
- php artisan serve
- php artisan serve --port= ANY NUMBER YOU WANT IT TO BE

----------------------------------
Understand our directory structure
----------------------------------
App > Models === Models
Resources > Views === Views
App > Http > Controllers === Controllers

**** The structure of our application will always be in the app folder or file but the actual content will be stored on the other files such as index, about, contact us pages etc.
****

        -------------------------------------------
        1. Setting a custom domain name for testing
        -------------------------------------------
            - php artisan serve --host=ANY DOMAIN.test --port= ANY PORT YOU ARE NOT Using
            - Then add the hosts to your host file located in your etc/hosts directory
            - Add the following then to the hosts file: 127.*.*.* ANY DOMAIN.test --> ** are port numbers you can add
            - Then you run the above command again in the terminal 

        ------------------
        2. The .env file
        ------------------
        - This file is used to store the environment variables 
        - Don't use this one too much, you can use the env.example or use it as a replacement if you run into trouble.

        ----------------------------
        3. Composer json & Lock File
        ----------------------------
        - Holds the dependicies we load 
        - The vendor folder holds all the libraries we will use in our project.
        - Removing the composer.lock file (rm composer.lock) and reinstall it with composer install
        - Adding libraries into composer.json 

--------------------------
Artisan Commands
--------------------------
- php artisan make:controller (NAME OF THE CONTROLLER) ----> Creates a controller class in Laravel
- php artisan make:controller (NAME OF THE CONTROLLER) --force  -----> Will override the current controller class if it already exists
- php artisan make:controller CarsController --resource -----> Laravel assigns the CRUD routes to the controller
- php artisan route:list ----> All our endpoints for all of our methods in our Controller
----------------------
Returning Views 
----------------------
1. Compact Method
2. With method [Best suited if you want to pass in one variable]
** Both examples are explained in the ProductsController.php file located in the Controllers folder

-----------------------------
Adding Images to your project
-----------------------------
    METHOD 1:
- Inside the image tag in the HTML add Laravel {{  }} and use the URL method to the directory path of the location of the image files
- EXAMPLE: <img class="img-team" src="{{ URL('images/team-section-home.jpg') }}" alt="">

    METHOD 2: 
- Using the command line -> php artisan storage:link (Create a folder named storage in the public directory) 
- This is a more secure way of doing things and protecting your images -> adds a extra layer of security on your images 
- You can use the URL() or the asset() methods when linking images.
** The asset method specifically used for images, HTML, CSS, JS [Can only store the assets in the public folder when using the asset method].

-------------------------------
Webpack.mix.js 
-------------------------------
- Here we compile mix.js('resources/js/app.js', 'public/js') the files from the left to the right handside

-------------------------------
Running nodejs
-------------------------------
- npm install ---> command line statement
- npm run dev ---> to run the webpack.mix.js file (Once its completed you need to run the command again to activate it.)
- npm run watch --> compile the css files 

*********************************
Creating a Model using Artisan
*********************************
- php artisan make:model (NAME OF THE MODEL)
- php artisan make:migration create_posts_table ----> This will create a migration with the name create posts create_posts_table
- php artisan make:model Post -m ----> This is a better way in creating a migration
** NB ** The up method in the model migrates everything inside it and the down method will undo everything that has been migrated.
- Creating tables for the database in the model file:
            $table-> increments('id'); // A table with the name id will increase by one (Auto-Increment)
            $table-> string('title'); // A table with the name title with a type of string
            $table-> mediumText('body'); // A table with the name body with a type of mediumText
            $table-> timestamps(); // A table with a default timestamp

- Run the following command which will run the up command in all the model files: php artisan migrate
- This command will keep track of which migration you have run or still need to run:
    |------> php artisan migrate:install
- This will call the down method in our migration   
    |------> php artisan migrate:reset
- This command will rollback to every database migration you've run on this instance and then runs every migration available. 
    |------> php artisan migrate:refresh
- This command drops all of your tables and then runs the up migration.
    |------> php artisan migrate:fresh
- This will command will rollback
    |------> php artisan migrate:rollback
- This command will show a table listing of every migration whether it has been run yet or not in the current environment.
    |------> php artisan migrate:status

------------------------------------------------
Adding dummy data into our database - Factories
------------------------------------------------
- php artisan make:factory PostFactory -----> Creating a factory 
- php artisan make:factory PostFactory --model=Post 
*************
Using Tinker
*************
THESE ARE ALL TERMINAL COMMANDS
- php artisan tinker ---> takes us to a new powwershell session
- \App\Models\Post::factory()->create(); -------> This command will create fake dummy data for us
- \App\Models\Post::factory()->count(2)->create(); -------> We can more then one row by calling a method of count and adding the number of rows we require

----------------------------
Query Builder Functionality
----------------------------
- For interacting with the database using a single API
- Non fluent query
        DB::select(['table' => 'posts', 'where' => ['id' => 1]])

- Fluent query
        DB::table('posts')->where('id', 1)->get()

- Using PDO to query the database
        $posts = DB::select('select * from posts WHERE id = :id', ['id' => 2]); ------> Using NAMED parameters
        $posts = DB::select('select * from posts WHERE id = ?', [2]); -------> Using Question Mark Parameters

- Creating our own query builders: 
        $id = 2;
        $posts = DB::table('posts') // Here we are checking the posts table in the DB.
                ->where('id', $id) // Where the column id is equal to the $id.
                ->get(); // Then we get everything. [Triggering the actual execution of the query using the GET method]
        dd($posts);

        ****** USING THE SELECT STATEMENT ******
        $id = 2;

        $posts = DB::table('posts') 
                ->select('body') // Using the select statement to read the data from the database
                ->get(); // This query will return back all the data in the body column in the posts table

                $id = 2;

        $posts = DB::table('posts') 
                 ->where('created_at', '>', now()->subDay())
                 ->orWhere('title', 'Mr.')
                 ->get();
        $posts = DB::table('posts') 
                ->whereBetween('id', [2,3]) // Scope a query to return only rows where a column is between 2 values
                ->get();

        // $posts = DB::table('posts') 
        //         ->whereNotNull('title') // Allows us to see if a column has a null/empty value
        //         ->get();

        // $posts = DB::table('posts') 
        //         ->select('title') //Selecting rows where the selected data is unique
        //         ->distinct()
        //         ->get();

        // $posts = DB::table('posts') 
        // ->orderBy('title', 'asc') // Returning the data according to the title in ascending order!
        // ->get();

        // $posts = DB::table('posts') 
        //         -> latest()//Sort our database based on a column ---> latest row according to the created_at column
        //         ->get();

        // $posts = DB::table('posts') 
        // -> oldest()//Sort our database based on a column ---> Oldest row according to the created_at column
        // ->get();

        // $posts = DB::table('posts') 
        //         ->inRandomOrder()//Sort our database based on a column ---> random order
        //         ->get();

        // $posts = DB::table('posts') 
        //         ->orderBy('created_at', 'desc')
        //         ->first(); // Gets us the first result in the database based on the criteria

        // $posts = DB::table('posts') 
        //         ->find($id); // Find the specific id in the database
        
        // $posts = DB::table('posts') 
        // ->where('id', $id)
        // ->count(); // Will count the number of matching results

        // $posts = DB::table('posts') 
        //         ->min('id'); // Returns the id with the smallest value ---> use max instead of min to return the largest value based on the criteria

        // $posts = DB::table('posts') 
        // ->sum('id'); // Calculates the total value of the id's

        // $posts = DB::table('posts') 
        // ->avg('id'); // Calculates the average value of the id's

        // $posts = DB::table('posts') 
        // ->insert([
        //     'title'=> 'New Title',
        //     'body' => 'New Body'
        // ]);  // Inserting Data into the database

        $posts = DB::table('posts')
        ->select('title')
        ->get(); // Show data based on the column we want to view

        // $posts = DB::table('posts') 
        // ->where('id', '=', 5)
        // ->update([
        //     'title'=> 'New Title As well',
        //     'body' => 'New Body As Well'
        // ]);  // Updating Data into the database

        // $posts = DB::table('posts') 
        // ->where('id', '=', 5)
        // ->delete();  // Deleting Data into the database
        
        dd($posts); // Is like the var_dump or print_r function in PHP

******************************************
Eloquent : ORM - Object Relational Matter
******************************************
- php artisan make:controller CarsController --resource ------> Creating CRUD methods in the controller 


*****************************************
Installing Tailwindcss 
*****************************************
- npm install cross-env
- npm install -and npm run dev
- npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
- npx tailwindcss init
- npm install 
- npm run watch

************************
Eloquent Serialization
************************
- The process of converting an array into a string. 
- Example:  $cars = Car::all()->toArray(); ------> The toArray() converts the array to a string, but it needs to be accessed as the following:
{{ $car['name'] }}, from our index.blade file 

- To return a JSON string we use $cars = Car::all()->toJson(); -----> The toJson() converts the array to a JSON string.
- $cars = json_decode($cars); // Here we convert the JSON string into a object so we can iterate over it
- Here we use the access operator to access the values of the JSON object ----> {{ $car->name}}
- In our models we can blacklist or whitelist certain properties we don't want the user to see. Such as id's and passwords

***********************
Eloquent One To Many
***********************
- Eloquent Relationships: Understand this *NB*
- We can create the migration in our current migration for example
- Look at the latest migration in the migrations folder for the explanation code.
- Under Models we have a Car.php = Shows are the cars and we have a CarModel.php which shows all the car models related to the cars in Car.php 
- You need to first have data in your database before you add the data to the second table(car_model). Remember that the car_id in the car_models refers to the id in the car table.

****************************************
Eloquent hasmany and hasone relationship
****************************************
- Pulling in relationships of a relationship


*******************
hasOne relationship
*******************
- Revise these eloquent relationships


************************************
Eloquent Many To Many Relationship
************************************
- We need to create a pivot table. Which is a table that connects to tables. 

*********************
Accessing the request - accepting request from the user
*********************
- Creating custom error messages 
- Run the following command php artisan make:rule [THE NAME OF THE RULE]

********************
Form Requests
********************
- Revise this section.

**********************
Image Upload 
**********************
- First ensure that our form is set to handle fle upload 
- Create the input type that can handle file upload
- php artisan make:migration add_image_to_cars_table (Here we are creating a migration to add the image path to the database table)

***********************
Basic Artisan Commands
***********************
- php artisan list ---> list all the artisan Commands
- php artisan clear-compiled ---> Acts like a cache run
- php artisan down  --> places our application in maintenance mode so we can run migrations or updates to our application
- php artisan up ----> puts the application back to live mode 
- php artisan env ---> see the current application environment 
- php artisan help ----> standard help / assistance
- php artisan --env ---> every command we can use for env
- php artisan optimize ---> optimize and clear the cache of the route and configuration files 
- php artisan cache:clear --> if we have file changes use this command(if our css is not loading on screen, clear the cache)
- php artisan auth:clear-resets --> This command will clear all expired tokens in the database
- php artisan key:generate ---> generate a random application encryption code that will be stored .env file
- Creating sessions in our application
