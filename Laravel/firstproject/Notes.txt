-------------------
Laravel Study Notes 
-------------------
1. Advantages of Laravel
- Single Authentication
- Simple API drivers
- Makes your app faster
- Helps for security

2. Disadvantages
- Composer: good to use, but not as good as NPM
- Less in-built support: bad support compared to Django and Ruby
- Bad Updates: updates might be problematic

3. Projects To Build
- ToDo List
- Login System
- Blog
- Bookmarker Manager
- TimeSheet
- Order app
- Portfolio
- CMS 
- Social Network
- Ecommerce


4. Creating a Laravel Project 
    # Option 1
        - First create the directory you want to work in from the command line
        - laravel new THE NAME OF THE PROJECT

    # Option 2
        - Using Composer to create your first Project
        - composer create-project --prefer-dist laravel/laravel THE NAME OF THE PROJECT

5. Serve the project to the web
- php artisan serve
- php artisan serve --port= ANY NUMBER YOU WANT IT TO BE

----------------------------------
Understand our directory structure
----------------------------------
App > Models === Models
Resources > Views === Views
App > Http > Controllers === Controllers

**** The structure of our application will always be in the app folder or file but the actual content will be stored on the other files such as index, about, contact us pages etc.
****

        -------------------------------------------
        1. Setting a custom domain name for testing
        -------------------------------------------
            - php artisan serve --host=ANY DOMAIN.test --port= ANY PORT YOU ARE NOT Using
            - Then add the hosts to your host file located in your etc/hosts directory
            - Add the following then to the hosts file: 127.*.*.* ANY DOMAIN.test --> ** are port numbers you can add
            - Then you run the above command again in the terminal 

        ------------------
        2. The .env file
        ------------------
        - This file is used to store the environment variables 
        - Don't use this one too much, you can use the env.example or use it as a replacement if you run into trouble.

        ----------------------------
        3. Composer json & Lock File
        ----------------------------
        - Holds the dependicies we load 
        - The vendor folder holds all the libraries we will use in our project.
        - Removing the composer.lock file (rm composer.lock) and reinstall it with composer install
        - Adding libraries into composer.json 

--------------------------
Artisan Commands
--------------------------
- php artisan make:controller (NAME OF THE CONTROLLER) ----> Creates a controller class in Laravel
- php artisan make:controller (NAME OF THE CONTROLLER) --force  -----> Will override the current controller class if it already exists

----------------------
Returning Views 
----------------------
1. Compact Method
2. With method [Best suited if you want to pass in one variable]
** Both examples are explained in the ProductsController.php file located in the Controllers folder

-----------------------------
Adding Images to your project
-----------------------------
    METHOD 1:
- Inside the image tag in the HTML add Laravel {{  }} and use the URL method to the directory path of the location of the image files
- EXAMPLE: <img class="img-team" src="{{ URL('images/team-section-home.jpg') }}" alt="">

    METHOD 2: 
- Using the command line -> php artisan storage:link (Create a folder named storage in the public directory) 
- This is a more secure way of doing things and protecting your images -> adds a extra layer of security on your images 
- You can use the URL() or the asset() methods when linking images.
** The asset method specifically used for images, HTML, CSS, JS [Can only store the assets in the public folder when using the asset method].

-------------------------------
Webpack.mix.js 
-------------------------------
- Here we compile mix.js('resources/js/app.js', 'public/js') the files from the left to the right handside

-------------------------------
Running nodejs
-------------------------------
- npm install ---> command line statement
- npm run dev ---> to run the webpack.mix.js file (Once its completed you need to run the command again to activate it.)
- npm run watch --> compile the css files 


*********************************
How to pull in front-end presets
*********************************
- php artisan ui tailwindcss ----> command line terminal
- npm install && npm run dev ----> compile a fresh scaffolding